// <auto-generated />
using events.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace events.Migrations
{
    [DbContext(typeof(EventsContext))]
    partial class EventsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("events.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryId");

                    b.Property<int?>("Countryid");

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.Property<bool>("active");

                    b.Property<string>("address1");

                    b.Property<string>("address2");

                    b.Property<string>("city");

                    b.Property<DateTime>("created_at");

                    b.Property<DateTime>("updated_at");

                    b.Property<string>("url");

                    b.HasKey("Id");

                    b.HasIndex("Countryid");

                    b.HasIndex("StateId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("events.Models.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<bool>("active");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("currency");

                    b.Property<string>("threelettercode");

                    b.Property<string>("twolettercode");

                    b.Property<DateTime>("updated_at");

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("events.Models.State", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.Property<bool>("active");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("twolettercode");

                    b.Property<DateTime>("updated_at");

                    b.HasKey("id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("events.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("events.Models.Company", b =>
                {
                    b.HasOne("events.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("Countryid");

                    b.HasOne("events.Models.State", "State")
                        .WithMany("Companies")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("events.Models.State", b =>
                {
                    b.HasOne("events.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
